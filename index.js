const axios = require('axios');
const ping = require('ping');
const fs = require('fs');

// Входной список прокси
const proxyList = [
'73.117.183.115:80',
'46.47.197.210:3128',
'174.138.54.65:80',
'34.175.101.255:80',
'77.65.55.121:3128',
'47.250.11.111:9098',
'178.170.9.226:80',
'35.209.198.222:80',
'62.72.29.174:80',
'68.183.143.134:80',
'211.104.20.205:8080',
'198.49.68.80:80',
'154.64.226.138:80',
'40.76.69.94:8080',
'50.217.226.41:80',
'162.223.90.130:80',
'203.154.162.230:443',
'91.107.188.202:8888',
'193.203.70.30:3128',
'154.203.132.55:8090',
'103.127.1.130:80',
'23.247.136.245:80',
'50.207.199.86:80',
'133.18.234.13:80',
'43.134.121.40:3128',
'50.174.145.9:80',
'116.203.28.43:80',
'50.174.145.15:80',
'50.172.75.120:80',
'211.128.96.206:80',
'20.24.43.214:80',
'68.185.57.66:80',
'154.65.39.7:80',
'14.199.30.127:80',
'43.134.33.254:3128',
'51.89.14.70:80',
'134.122.26.11:80',
'190.103.177.131:80',
'62.72.56.132:80',
'20.206.106.192:8123',
'154.236.177.100:1977',
'20.111.54.16:8123',
'20.210.113.32:8123',
'81.200.149.178:80',
'114.156.77.107:8080',
'34.81.72.31:80',
'72.10.160.94:8355',
'172.232.180.108:80',
'193.34.144.169:80',
'160.86.242.23:8080',
'72.10.160.90:1365',
'20.205.61.143:80',
'111.238.48.221:80',
'72.10.164.178:1417',
'72.10.160.171:10095',
'72.10.160.170:2657',
'139.59.1.14:8080',
'144.126.216.57:80',
'50.217.226.44:80',
'24.205.201.186:80',
'0.0.0.0:80',
'50.172.75.122:80',
'64.92.82.59:8080',
'97.74.87.226:80',
'50.172.75.114:80',
'50.231.104.58:80',
'50.174.7.156:80',
'50.207.199.81:80',
'51.89.255.67:80',
'127.0.0.7:80',
'154.202.112.44:3128',
'154.202.115.218:3128',
'154.202.124.99:3128',
'104.233.13.194:6189',
'104.239.105.3:6533',
'154.30.251.61:5202',
'45.141.83.229:6593',
'45.41.162.151:6788',
'104.239.104.210:6434',
'142.147.245.40:5731',
'193.148.92.164:6091',
'173.0.9.229:5812',
'193.148.92.181:6108',
'154.29.239.95:6134',
'20.219.118.36:80',
'104.238.50.203:6749',
'45.141.83.145:6509',
'45.56.175.30:5704',
'43.245.116.26:6541',
'23.94.138.147:6421',
'45.127.250.131:5740',
'161.123.115.216:5237',
'161.123.93.1:5731',
'23.94.138.95:6369',
'104.239.78.237:6182',
'154.202.125.8:3128',
'184.174.44.122:6548',
'207.244.217.248:6795',
'154.29.232.119:6779',
'184.174.27.131:6354',
'156.239.50.33:3128',
'184.174.24.32:6608',
'207.244.217.25:6572',
'161.123.101.47:6673',
'104.207.59.140:3128',
'193.148.92.11:5938',
'173.244.41.238:6422',
'104.233.12.25:6576',
'104.167.28.98:3128',
'206.206.69.154:6418',
'154.202.112.218:3128',
'154.202.119.106:3128',
'154.202.107.62:3128',
'206.206.122.70:5701',
'172.245.157.156:6741',
'104.238.49.253:5907',
'154.29.232.147:6807',
'147.185.250.58:6844',
'45.61.122.250:6542',
'154.201.47.98:3128',
'23.94.138.204:6478',
'154.202.127.72:3128',
'154.202.107.92:3128',
'154.202.115.231:3128',
'154.202.117.73:3128',
'154.202.126.193:3128',
'107.173.137.194:6448',
'154.202.123.164:3128',
'154.202.118.56:3128',
'147.185.217.203:6637',
'104.165.169.74:3128',
'154.202.118.108:3128',
'156.239.55.212:3128',
'154.202.123.176:3128',
'45.61.125.20:6031',
'154.202.118.112:3128',
'45.41.179.43:6578',
'154.202.99.253:3128',
'154.202.118.60:3128',
'104.245.244.43:6483',
'154.202.114.60:3128',
'154.202.119.131:3128',
'156.239.50.222:3128',
'104.207.32.4:3128',
'104.239.105.88:6618',
'154.202.118.2:3128',
'154.202.112.204:3128',
'154.201.47.225:3128',
'154.202.116.170:3128',
'184.174.27.177:6400',
'184.174.27.183:6406',
'154.201.36.136:3128',
'154.202.114.72:3128',
'104.239.78.16:5961',
'104.238.36.239:6246',
'104.252.131.114:3128',
'154.202.124.19:3128',
'154.202.115.204:3128',
'206.206.119.224:6135',
'154.202.114.8:3128',
'154.202.115.139:3128',
'154.202.107.224:3128',
'154.202.117.85:3128',
'104.233.13.107:6102',
'154.202.127.250:3128',
'104.239.78.122:6067',
'154.202.118.48:3128',
'45.61.122.153:6445',
'154.202.117.248:3128',
'154.202.117.244:3128',
'104.239.105.187:6717',
'154.202.117.104:3128',
'104.165.169.193:3128',
'154.202.123.206:3128',
'173.211.0.165:6658',
'154.202.99.77:3128',
'154.202.113.129:3128',
'45.141.83.148:6512',
'206.206.124.104:6685',
'140.238.247.9:8100',
'107.172.156.56:5704',
'154.202.115.189:3128',
'45.141.80.3:5729',
'154.202.119.111:3128',
'155.254.49.80:6640',
'154.29.239.113:6152',
'43.229.9.125:6394',
'154.202.123.170:3128',
'154.202.114.26:3128',
'142.147.245.16:5707',
'161.123.130.239:5910',
'154.202.118.11:3128',
'154.201.47.219:3128',
'154.202.113.27:3128',
'154.202.112.146:3128',
'154.202.114.234:3128',
'154.202.116.154:3128',
'216.10.27.46:6724',
'154.202.116.2:3128',
'161.123.115.99:5120',
'154.202.112.208:3128',
'45.127.250.149:5758',
'23.94.138.69:6343',
'104.164.183.72:3128',
'154.202.112.106:3128',
'161.123.154.132:6662',
'142.111.1.157:5189',
'193.148.92.157:6084',
'154.202.117.64:3128',
'173.244.41.241:6425',
'154.202.123.94:3128',
'154.202.114.116:3128',
'154.202.117.111:3128',
'173.244.41.223:6407',
'107.172.156.171:5819',
'154.202.115.57:3128',
'154.202.127.20:3128',
'154.202.116.228:3128',
'216.173.120.215:6507',
'104.238.37.7:6564',
'206.206.73.70:6686',
'104.165.169.242:3128',
'154.202.117.112:3128',
'154.202.112.111:3128',
'154.202.126.235:3128',
'45.56.174.134:6387',
'154.202.107.164:3128',
'154.202.124.35:3128',
'104.245.244.196:6636',
'154.202.114.124:3128',
'154.202.117.227:3128',
'206.206.69.86:6350',
'154.202.117.123:3128',
'154.202.127.142:3128',
'154.202.117.181:3128',
'154.202.117.139:3128',
'154.202.119.30:3128',
'154.202.125.226:3128',
'173.211.0.114:6607',
'154.202.124.115:3128',
'45.61.123.24:5703',
'142.111.1.45:5077',
'45.61.123.165:5844',
'161.123.5.206:5255',
'154.202.119.74:3128',
'154.202.117.158:3128',
'45.43.64.181:6439',
'154.202.114.12:3128',
'142.147.244.31:6275',
'154.202.119.50:3128',
'154.202.99.67:3128',
'154.202.113.67:3128',
'198.46.161.85:5135',
'154.202.112.205:3128',
'154.202.117.107:3128',
'154.202.118.163:3128',
'195.252.236.91:80',
'154.202.114.162:3128',
'156.239.49.86:3128',
'154.201.47.124:3128',
'192.210.132.152:6122',
'154.202.99.182:3128',
'154.202.125.162:3128',
'45.141.80.13:5739',
'45.127.248.61:5062',
'154.202.126.59:3128',
'154.202.112.2:3128',
'142.111.245.125:5992',
'104.239.105.181:6711',
'104.165.127.215:3128',
'216.173.120.29:6321',
'154.202.125.250:3128',
'154.202.123.222:3128',
'154.201.36.59:3128',
'104.165.127.131:3128',
'104.232.211.134:5747',
'154.202.113.49:3128',
'45.41.179.225:6760',
'20.37.207.8:8080',
'154.202.111.197:3128',
'154.202.127.150:3128',
'154.202.113.127:3128',
'154.202.99.245:3128',
'154.201.36.194:3128',
'154.202.99.57:3128',
'142.147.244.91:6335',
'154.202.114.128:3128',
'161.123.115.44:5065',
'154.202.114.150:3128',
'147.185.250.51:6837',
'154.202.119.206:3128',
'104.207.54.24:3128',
'154.202.123.154:3128',
'154.202.114.28:3128',
'104.143.251.18:6280',
'154.202.119.162:3128',
'154.202.117.225:3128',
'89.116.191.51:80',
'51.91.109.83:80',
'195.35.2.231:80'
];

const timeoutLimit = 1000; // Лимит времени на ожидание в миллисекундах
const logFile = 'log.txt'; // Имя файла для логов

// Функция для записи лога в файл
function logToFile(message) {
    fs.appendFileSync(logFile, message + '\n', 'utf8');
}

// Функция для проверки одного прокси
async function checkProxy(proxy) {
    const [host, port] = proxy.split(':');

    // Пинг прокси
    const pingResult = await ping.promise.probe(host, { timeout: timeoutLimit / 1000 });

    if (!pingResult.alive) {
        const message = `${proxy} - Превышен лимит ожидания, пропуск.`;
        console.log(message);
        return;
    }

    const pingTime = pingResult.time;
    let message;

    try {
        // Проверка HTTP
        const httpResponse = await axios.get('http://example.com', {
            proxy: {
                host,
                port: parseInt(port),
            },
            timeout: timeoutLimit,
        });

        message = `${proxy} - Успешно. Статус ${httpResponse.status}, пинг: ${pingTime}ms`;

        console.log(message);
        logToFile(message);
    } catch (error) {
        if (error.response) {
            message = `${proxy} - Провалено, статус ${error.response.status}, пинг: ${pingTime}ms`;
        } else if (error.code === 'ECONNABORTED') {
            message = `${proxy} - Превышен лимит ожидания, пропуск.`;
        } else {
            message = `${proxy} - Провалено, ошибка: ${error.message}`;
        }
        console.log(message);
    }
}

// Основная функция для проверки всех прокси
async function checkProxies(proxyList) {
    // Очистка файла лога перед записью новых данных
    fs.writeFileSync(logFile, '', 'utf8');

    for (const proxy of proxyList) {
        await checkProxy(proxy);
    }
}

// Запуск проверки прокси
checkProxies(proxyList);